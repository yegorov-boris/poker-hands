// Code generated by mockery v1.0.0. DO NOT EDIT.
package main

import mock "github.com/stretchr/testify/mock"

// mockCardStringParser is an autogenerated mock type for the cardStringParser type
type mockCardStringParser struct {
	mock.Mock
}

// ParseCardString provides a mock function with given fields: _a0
func (_m *mockCardStringParser) ParseCardString(_a0 string) (Card, error) {
	ret := _m.Called(_a0)

	var r0 Card
	if rf, ok := ret.Get(0).(func(string) Card); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(Card)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SortByValue provides a mock function with given fields: _a0
func (_m *mockCardStringParser) SortByValue(_a0 Hand) Hand {
	ret := _m.Called(_a0)

	var r0 Hand
	if rf, ok := ret.Get(0).(func(Hand) Hand); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Hand)
		}
	}

	return r0
}

// SplitHandsString provides a mock function with given fields: _a0
func (_m *mockCardStringParser) SplitHandsString(_a0 string) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
