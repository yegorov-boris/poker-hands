// Code generated by mockery v1.0.0. DO NOT EDIT.
package main

import mock "github.com/stretchr/testify/mock"

// mockCombinationMatcher is an autogenerated mock type for the combinationMatcher type
type mockCombinationMatcher struct {
	mock.Mock
}

// IsFlush provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsFlush(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsFourKind provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsFourKind(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsFullHouse provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsFullHouse(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsOnePair provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsOnePair(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsRoyalFlush provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsRoyalFlush(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsStraight provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsStraight(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsStraightFlush provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsStraightFlush(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsThreeKind provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsThreeKind(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}

// IsTwoPairs provides a mock function with given fields: hand
func (_m *mockCombinationMatcher) IsTwoPairs(hand Hand) (bool, Hand) {
	ret := _m.Called(hand)

	var r0 bool
	if rf, ok := ret.Get(0).(func(Hand) bool); ok {
		r0 = rf(hand)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 Hand
	if rf, ok := ret.Get(1).(func(Hand) Hand); ok {
		r1 = rf(hand)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(Hand)
		}
	}

	return r0, r1
}
